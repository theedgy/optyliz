{"version":3,"sources":["logo.svg","scenes/Search/styles.ts","components/SearchForm/styles.ts","components/SearchForm/index.tsx","components/Article/styles.ts","components/Article/index.tsx","components/List/styles.ts","components/List/index.tsx","services/fetcher.ts","components/Skeleton/index.ts","components/Pagnation/components/PageButton/styles.ts","components/Pagnation/components/PageButton/index.tsx","components/Pagnation/styles.ts","components/Pagnation/index.tsx","scenes/Search/index.tsx","services/useDebounce.ts","styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Wrapper","styled","div","Notice","h2","SearchFormWrapper","form","Input","input","SearchForm","setValue","value","placeholder","defaultValue","onChange","e","target","ArticleWrapper","article","ArticleContent","a","ArticleTitle","ArticleInfo","span","ArticleImage","figure","Article","item","Poster","src","alt","Title","href","imdbID","rel","Type","Year","ListWrapper","List","items","map","getParsedParams","params","Object","entries","entry","join","fetcher","urlBase","window","location","protocol","fetch","apikey","response","ok","console","log","json","Error","shimmer","keyframes","Skeleton","Button","button","PageButton","direction","disabled","onClick","toUpperCase","PaginationRow","PageCount","Pagination","currentPage","onPageChange","lastPage","Search","useState","results","setResults","isLoading","setLoading","isError","setError","inputValue","setInputValue","setPage","totalResults","setTotalResults","debouncedValue","delay","setDebouncedValue","useEffect","timer","setTimeout","clearTimeout","useDebounce","s","page","then","Response","parseInt","length","dir","prev","spin","GlobalStyle","createGlobalStyle","AppContainer","Header","header","LogoWrapper","Logo","img","App","logo","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8175cfac.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: var(--generalSpacing);\n`;\n\nexport const Notice = styled.h2`\n    text-align: center;\n`;\n","import styled from 'styled-components';\n\nexport const SearchFormWrapper = styled.form`\n    display: flex;\n    justify-content: center;\n    margin-bottom: var(--generalSpacing);\n`;\n\nexport const Input = styled.input`\n    width: 80%;\n    height: 50px;\n    margin: 20px auto 0;\n    border: 0;\n    border-bottom: 2px solid #000;\n    font-size: 20px;\n    padding: 0 var(--generalSpacing);\n    border-radius: 0;\n`;\n","import React from 'react';\nimport { Input, SearchFormWrapper } from './styles';\n\ninterface SearchFormProps {\n    value?: string | number;\n    setValue: (value: string | number) => void;\n}\nexport const SearchForm = ({ setValue, value }: SearchFormProps) => {\n    return (\n        <SearchFormWrapper>\n            <Input\n                placeholder={'Start typing to run search'}\n                defaultValue={value}\n                onChange={(e) => setValue(e.target.value)}\n            />\n        </SearchFormWrapper>\n    );\n};\n","import styled from 'styled-components';\n\nexport const ArticleWrapper = styled.article`\n    display: flex;\n    align-items: center;\n    border: var(--generalBorder);\n    border-radius: var(--borderRadius);\n    padding: var(--generalSpacing);\n`;\nexport const ArticleContent = styled.a`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: var(--generalSpacing);\n    flex: 1;\n    color: currentColor;\n    text-decoration: none;\n    transition: color 0.2s;\n\n    &:hover {\n        color: darkred;\n    }\n`;\n\nexport const ArticleTitle = styled.h2`\n    font-size: 20px;\n    font-weight: bold;\n    margin: 0;\n    text-align: center;\n`;\n\nexport const ArticleInfo = styled.span`\n    font-size: 12px;\n    color: grey;\n`;\n\nexport const ArticleImage = styled.figure`\n    margin: 0;\n    line-height: 0;\n    width: 150px;\n\n    @media (max-width: 767px) {\n        width: 100px;\n    }\n\n    img {\n        max-width: 100%;\n    }\n`;\n","import React from 'react';\nimport { SearchItem } from '../../services/apiTypes';\nimport {\n    ArticleContent,\n    ArticleImage,\n    ArticleTitle,\n    ArticleWrapper,\n    ArticleInfo,\n} from './styles';\n\ninterface ArticleProps {\n    item: SearchItem;\n}\n\nexport const Article = ({ item }: ArticleProps) => {\n    return (\n        <ArticleWrapper>\n            {\n                // Do not render image when its API value is undefied which is `N/A` from my research\n                item.Poster !== 'N/A' && (\n                    <ArticleImage>\n                        <img src={item.Poster} alt={item.Title} />\n                    </ArticleImage>\n                )\n            }\n            <ArticleContent\n                href={`https://www.imdb.com/title/${item.imdbID}`}\n                target={'_blank'}\n                rel=\"noopener noreferrer\"\n            >\n                <ArticleTitle>{item.Title}</ArticleTitle>\n                <ArticleInfo>{`${item.Type} (${item.Year})`}</ArticleInfo>\n            </ArticleContent>\n        </ArticleWrapper>\n    );\n};\n","import styled from 'styled-components';\n\nexport const ListWrapper = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-gap: var(--generalSpacing);\n\n    @media (max-width: 1365px) {\n        grid-template-columns: repeat(3, 1fr);\n    }\n\n    @media (max-width: 1023px) {\n        grid-template-columns: repeat(2, 1fr);\n    }\n\n    @media (max-width: 767px) {\n        grid-template-columns: repeat(1, 1fr);\n    }\n`;\n","import React from 'react';\nimport { SearchItem } from '../../services/apiTypes';\nimport { Article } from '../Article';\nimport { ListWrapper } from './styles';\n\ninterface ListProps {\n    items: SearchItem[];\n}\n\nexport const List = ({ items }: ListProps) => {\n    return (\n        <ListWrapper>\n            {items.map((item) => (\n                <Article key={item.imdbID} item={item} />\n            ))}\n        </ListWrapper>\n    );\n};\n","// Helper to get url params. In a real world i would use `new URLSearchParams()` but it's `toString()` method\n// encodes the string and replace spaces (like pulp%20fiction) which not work correctly in omdbapi.com api\nconst getParsedParams = (params: { [key: string]: string | number }) =>\n    Object.entries(params)\n        .map((entry) => entry.join('='))\n        .join('&');\n\n// fetcher function to fetch and handle errors with generic typings\nexport const fetcher = async <T>(params: {\n    [key: string]: string | number;\n}): Promise<T> => {\n    // Those values should go to .env file, but for just reacruitment app it's faster to handle deployments etc.\n    const urlBase = `${window.location.protocol}//www.omdbapi.com`;\n    const apikey = 'b508fc3';\n\n    const response = await fetch(\n        `${urlBase}?${getParsedParams({\n            apikey,\n            ...params,\n        })}`\n    );\n\n    if (!response.ok) {\n        console.log(response.json());\n        throw new Error(`Response not successful: ${response}`);\n    }\n\n    return await response.json();\n};\n","import styled, { keyframes } from 'styled-components';\n\nconst shimmer = keyframes`\n    to {\n        transform: translateX(100%);\n    }\n`;\n\nexport const Skeleton = styled.div`\n    display: inline-block;\n    height: 200px;\n    position: relative;\n    overflow: hidden;\n    background-color: #dddbdd;\n    border-radius: var(--borderRadius);\n    margin-bottom: var(--generalSpacing);\n\n    &::after {\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        transform: translateX(-100%);\n        background: linear-gradient(\n            90deg,\n            rgba(255, 255, 255, 0) 0,\n            rgba(255, 255, 255, 0.4) 20%,\n            rgba(255, 255, 255, 0.8) 60%,\n            rgba(255, 255, 255, 0) 100%\n        );\n        animation: ${shimmer} 2s infinite;\n    }\n`;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n    padding: 5px;\n    background: transparent;\n    border-radius: 5px;\n    border: var(--generalBorder);\n    margin: var(--generalSpacing);\n    cursor: pointer;\n`;\n","import React from 'react';\nimport { Button } from './styles';\n\nexport type Direction = 'prev' | 'next';\n\nexport interface PageButtonProps {\n    direction: Direction;\n    disabled?: boolean;\n    onClick: () => void;\n}\n\nexport const PageButton = ({\n    direction,\n    disabled,\n    onClick,\n}: PageButtonProps) => {\n    return (\n        <Button onClick={onClick} disabled={disabled}>\n            {direction.toUpperCase()}\n        </Button>\n    );\n};\n","import styled from 'styled-components';\n\nexport const PaginationRow = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: var(--generalSpacing);\n`;\n\nexport const PageCount = styled.span`\n    font-weight: bold;\n    font-size: 14px;\n`;\n","import React from 'react';\nimport { Direction, PageButton } from './components/PageButton';\nimport { PageCount, PaginationRow } from './styles';\n\ninterface PaginationProps {\n    currentPage?: number;\n    onPageChange: (direction: Direction) => void;\n    lastPage?: boolean;\n}\n\nexport const Pagination = ({\n    currentPage,\n    onPageChange,\n    lastPage,\n}: PaginationProps) => {\n    return (\n        <PaginationRow>\n            <PageButton\n                direction={'prev'}\n                onClick={() => onPageChange('prev')}\n                disabled={currentPage === 1}\n            />\n\n            <PageCount>{currentPage}</PageCount>\n\n            <PageButton\n                direction={'next'}\n                onClick={() => onPageChange('next')}\n                disabled={lastPage}\n            />\n        </PaginationRow>\n    );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Notice, Wrapper } from './styles';\nimport { SearchForm } from '../../components/SearchForm';\nimport { List } from '../../components/List';\nimport { fetcher } from '../../services/fetcher';\nimport { SearchItem, SearchResponse } from '../../services/apiTypes';\nimport { Skeleton } from '../../components/Skeleton';\nimport { useDebounce } from '../../services/useDebounce';\nimport { Pagination } from '../../components/Pagnation';\n\n// This values is not changable and it comes from API settings; Used to calculate last page for pagination\nconst postsPerPage = 10;\n\nexport const Search = () => {\n    const [results, setResults] = useState<SearchItem[]>([]);\n    const [isLoading, setLoading] = useState(false);\n    const [isError, setError] = useState<string | false>(false);\n    const [inputValue, setInputValue] = useState<string | number>('');\n    const [currentPage, setPage] = useState<number>(1);\n    const [totalResults, setTotalResults] = useState(0);\n\n    const debouncedValue = useDebounce<string | number>(inputValue, 500);\n\n    // Reset state whenever input value has bean cleared\n    useEffect(() => {\n        if (!debouncedValue) {\n            setResults([]);\n            setError(false);\n        }\n    }, [debouncedValue]);\n\n    // Reset page to 1 whenever input is reused\n    useEffect(() => {\n        if (debouncedValue) {\n            setPage(1);\n        }\n    }, [debouncedValue]);\n\n    // Fetch data\n    useEffect(() => {\n        // Do not fire query whenever input is empty\n        if (!debouncedValue) {\n            return;\n        }\n\n        // Set loading state for UX\n        setLoading(true);\n\n        // Fetching\n        fetcher<SearchResponse>({\n            s: debouncedValue,\n            page: currentPage,\n        }).then((response) => {\n            // Add resutls to state\n            if (response.Response === 'True') {\n                setResults(response.Search);\n                setError(false);\n            } else {\n                // Handle custom error from '200' status response\n                setResults([]);\n\n                if (!!response.Error) {\n                    setError(response.Error);\n                }\n            }\n\n            // Set results for pagination counting\n            setTotalResults(parseInt(response.totalResults, 10) || 0);\n\n            // Remove loading state on query finish\n            setLoading(false);\n        });\n    }, [debouncedValue, currentPage]);\n\n    return (\n        <Wrapper>\n            <SearchForm value={inputValue} setValue={setInputValue} />\n\n            {isLoading && !results.length && !isError && <Skeleton />}\n\n            {isError && <Notice>{isError}</Notice>}\n\n            {results.length > 0 && (\n                <>\n                    <List items={results} />\n\n                    {totalResults && totalResults > postsPerPage && (\n                        <Pagination\n                            currentPage={currentPage}\n                            lastPage={\n                                totalResults <=\n                                (currentPage - 1) * postsPerPage +\n                                    results.length\n                            }\n                            onPageChange={(dir) =>\n                                setPage((prev) => {\n                                    if (dir === 'next') {\n                                        return prev + 1;\n                                    }\n\n                                    if (dir === 'prev' && prev > 1) {\n                                        return prev - 1;\n                                    }\n\n                                    return 1;\n                                })\n                            }\n                        />\n                    )}\n                </>\n            )}\n        </Wrapper>\n    );\n};\n","import { useState, useEffect } from 'react';\n\n// https://usehooks-typescript.com/react-hook/use-debounce\nexport const useDebounce = <T>(value: T, delay?: number): T => {\n    const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n    useEffect(() => {\n        const timer = setTimeout(() => setDebouncedValue(value), delay || 500);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [value, delay]);\n\n    return debouncedValue;\n};\n","import styled, { createGlobalStyle, keyframes } from 'styled-components';\n\nconst spin = keyframes`\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n    }\n`;\n\n// Add global styles\nexport const GlobalStyle = createGlobalStyle`\n body {\n   margin: 0;\n   padding: 0;\n   font-family: sans-serif;\n   \n   --borderRadius: 10px;\n   --generalSpacing: 15px;\n   --generalBorder: 1px solid rgba(0, 0, 0, 0.2);\n }\n`;\n\nexport const AppContainer = styled.div`\n    display: grid;\n    grid-auto-rows: 50px 100% 50px;\n`;\n\nexport const Header = styled.header`\n    display: flex;\n    justify-content: space-between;\n    align-items: baseline;\n    padding: 10px;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`;\n\nexport const LogoWrapper = styled.a`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    text-decoration: none;\n    color: currentColor;\n    font-weight: bold;\n`;\n\nexport const Logo = styled.img`\n    max-width: 100%;\n    max-height: 30px;\n    animation: ${spin} infinite 20s linear;\n`;\n","import React from 'react';\nimport logo from './logo.svg';\nimport { Search } from './scenes/Search';\nimport { AppContainer, Header, Logo, LogoWrapper } from './styles';\n\nfunction App() {\n    return (\n        <AppContainer>\n            <Header>\n                <LogoWrapper href=\"/\">\n                    <Logo src={logo} className=\"App-logo\" alt=\"logo\" />\n                    From Poland With Dev\n                </LogoWrapper>\n            </Header>\n\n            <Search />\n        </AppContainer>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(\n            ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n                getCLS(onPerfEntry);\n                getFID(onPerfEntry);\n                getFCP(onPerfEntry);\n                getLCP(onPerfEntry);\n                getTTFB(onPerfEntry);\n            }\n        );\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { GlobalStyle } from './styles';\n\nReactDOM.render(\n    <React.StrictMode>\n        <GlobalStyle />\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}